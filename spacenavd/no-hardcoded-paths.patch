diff -Naur spacenavd-0.6.orig/src/cfgfile.c spacenavd-0.6/src/cfgfile.c
--- spacenavd-0.6.orig/src/cfgfile.c	2013-06-25 17:12:28.000000000 -0700
+++ spacenavd-0.6/src/cfgfile.c	2018-02-04 20:04:45.298880028 -0800
@@ -22,6 +22,7 @@
 #include <ctype.h>
 #include <errno.h>
 #include <fcntl.h>
+#include <unistd.h>
 #include "cfgfile.h"
 
 enum {TX, TY, TZ, RX, RY, RZ};
@@ -29,6 +30,10 @@
 static const int def_axmap[] = {0, 2, 1, 3, 5, 4};
 static const int def_axinv[] = {0, 1, 1, 0, 1, 1};
 
+#define DEFAULT_SOCK_NAME "/var/run/spnav.sock"
+#define DEFAULT_PIDFILE "/var/run/spnav.pid"
+#define DEFAULT_LOGFILE "/var/log/spnavd.log"
+
 void default_cfg(struct cfg *cfg)
 {
 	int i;
@@ -62,6 +67,29 @@
 		cfg->devname[i] = 0;
 		cfg->devid[i][0] = cfg->devid[i][1] = -1;
 	}
+
+    strncpy(cfg->sock_name, DEFAULT_SOCK_NAME, PATH_MAX-1);
+    strncpy(cfg->pidfile, DEFAULT_PIDFILE, PATH_MAX-1);
+    strncpy(cfg->logfile, DEFAULT_LOGFILE, PATH_MAX-1);
+    cfg->sock_name[PATH_MAX-1] = 0;
+    cfg->pidfile[PATH_MAX-1] = 0;
+    cfg->logfile[PATH_MAX-1] = 0;
+}
+
+/* result will remain untouched if resolving fails; this assume result has space for PATH_MAX chars */
+void resolve_path(char *result, char *val) {
+    if(val[0] == '/') { /* Assume val is an absolute path */
+        strncpy(result, val, PATH_MAX-1);
+    }
+    else { /* Assume val is a relative path; note that realpath won't do, because val need not exist in the filesystem yet */
+        char buf[PATH_MAX];
+        if (!getcwd(buf, PATH_MAX)) {
+            return;
+        } else {
+            snprintf(result, PATH_MAX, "%s/%s", buf, val);
+        }
+    }
+    result[PATH_MAX-1] = 0;
 }
 
 #define EXPECT(cond) \
@@ -305,8 +333,12 @@
 				fprintf(stderr, "invalid configuration value for %s, expected a vendorid:productid pair\n", key_str);
 				continue;
 			}
-
-
+        } else if(strcmp(key_str, "sock_name") == 0) {
+            resolve_path(cfg->sock_name, val_str);
+        } else if(strcmp(key_str, "pidfile") == 0) {
+            resolve_path(cfg->pidfile, val_str);
+        } else if(strcmp(key_str, "logfile") == 0) {
+            resolve_path(cfg->logfile, val_str);
 		} else {
 			fprintf(stderr, "unrecognized config option: %s\n", key_str);
 		}
diff -Naur spacenavd-0.6.orig/src/cfgfile.h spacenavd-0.6/src/cfgfile.h
--- spacenavd-0.6.orig/src/cfgfile.h	2013-06-25 17:12:28.000000000 -0700
+++ spacenavd-0.6/src/cfgfile.h	2018-02-04 19:29:02.147401304 -0800
@@ -39,6 +39,10 @@
 
 	char *devname[MAX_CUSTOM];	/* custom USB device name list */
 	int devid[MAX_CUSTOM][2];	/* custom USB vendor/product id list */
+
+    char sock_name[PATH_MAX];
+    char pidfile[PATH_MAX];
+    char logfile[PATH_MAX];
 };
 
 void default_cfg(struct cfg *cfg);
diff -Naur spacenavd-0.6.orig/src/proto_unix.c spacenavd-0.6/src/proto_unix.c
--- spacenavd-0.6.orig/src/proto_unix.c	2010-06-06 17:47:02.000000000 -0700
+++ spacenavd-0.6/src/proto_unix.c	2018-02-04 19:29:02.148401307 -0800
@@ -49,16 +49,16 @@
 		return -1;
 	}
 
-	unlink(SOCK_NAME);	/* in case it already exists */
+	unlink(cfg.sock_name);	/* in case it already exists */
 
 	memset(&addr, 0, sizeof addr);
 	addr.sun_family = AF_UNIX;
-	strcpy(addr.sun_path, SOCK_NAME);
+	strcpy(addr.sun_path, cfg.sock_name);
 
 	prev_umask = umask(0);
 
 	if(bind(s, (struct sockaddr*)&addr, sizeof addr) == -1) {
-		fprintf(stderr, "failed to bind unix socket: %s: %s\n", SOCK_NAME, strerror(errno));
+		fprintf(stderr, "failed to bind unix socket: %s: %s\n", cfg.sock_name, strerror(errno));
 		return -1;
 	}
 
@@ -79,7 +79,7 @@
 		close(lsock);
 		lsock = -1;
 
-		unlink(SOCK_NAME);
+		unlink(cfg.sock_name);
 	}
 }
 
diff -Naur spacenavd-0.6.orig/src/spnavd.c spacenavd-0.6/src/spnavd.c
--- spacenavd-0.6.orig/src/spnavd.c	2014-02-01 06:54:30.000000000 -0800
+++ spacenavd-0.6/src/spnavd.c	2018-02-04 20:06:09.956837959 -0800
@@ -47,6 +47,7 @@
 int main(int argc, char **argv)
 {
 	int i, pid, ret, become_daemon = 1;
+    char *config_file = 0;
 
 	for(i=1; i<argc; i++) {
 		if(argv[i][0] == '-' && argv[i][2] == 0) {
@@ -60,7 +61,7 @@
 				break;
 
 			case 'h':
-				printf("usage: %s [options]\n", argv[0]);
+				printf("usage: %s [options] config\n", argv[0]);
 				printf("options:\n");
 				printf("  -d\tdo not daemonize\n");
 				printf("  -v\tverbose output\n");
@@ -72,11 +73,17 @@
 				return 1;
 			}
 		} else {
-			fprintf(stderr, "unexpected argument: %s\n", argv[i]);
-			return 1;
+            config_file = argv[i];
 		}
 	}
 
+    if(!config_file) {
+        fprintf(stderr, "No config file specified\n");
+        return 1;
+    }
+
+	read_cfg(config_file, &cfg);
+
 	if((pid = find_running_daemon()) != -1) {
 		fprintf(stderr, "Spacenav daemon already running (pid: %d). Aborting.\n", pid);
 		return 1;
@@ -89,7 +96,6 @@
 
 	puts("Spacenav daemon " VERSION);
 
-	read_cfg("/etc/spnavrc", &cfg);
 
 	signal(SIGINT, sig_handler);
 	signal(SIGTERM, sig_handler);
@@ -213,7 +219,7 @@
 		remove_device(tmp);
 	}
 
-	remove(PIDFILE);
+	remove(cfg.pidfile);
 }
 
 static void daemonize(void)
@@ -236,7 +242,7 @@
 	}
 
 	open("/dev/zero", O_RDONLY);
-	if(open(LOGFILE, O_WRONLY | O_CREAT | O_TRUNC, 0644) == -1) {
+	if(open(cfg.logfile, O_WRONLY | O_CREAT | O_TRUNC, 0644) == -1) {
 		open("/dev/null", O_WRONLY);
 	}
 	dup(1);
@@ -250,7 +256,7 @@
 	FILE *fp;
 	int pid = getpid();
 
-	if(!(fp = fopen(PIDFILE, "w"))) {
+	if(!(fp = fopen(cfg.pidfile, "w"))) {
 		return -1;
 	}
 	fprintf(fp, "%d\n", pid);
@@ -265,7 +271,7 @@
 	struct sockaddr_un addr;
 
 	/* try to open the pid-file */
-	if(!(fp = fopen(PIDFILE, "r"))) {
+	if(!(fp = fopen(cfg.pidfile, "r"))) {
 		return -1;
 	}
 	if(fscanf(fp, "%d\n", &pid) != 1) {
@@ -280,7 +286,7 @@
 	}
 	memset(&addr, 0, sizeof addr);
 	addr.sun_family = AF_UNIX;
-	strncpy(addr.sun_path, SOCK_NAME, sizeof addr.sun_path);
+	strncpy(addr.sun_path, cfg.sock_name, sizeof addr.sun_path);
 
 	if(connect(s, (struct sockaddr*)&addr, sizeof addr) == -1) {
 		close(s);
diff -Naur spacenavd-0.6.orig/src/spnavd.h spacenavd-0.6/src/spnavd.h
--- spacenavd-0.6.orig/src/spnavd.h	2013-06-25 17:12:28.000000000 -0700
+++ spacenavd-0.6/src/spnavd.h	2018-02-04 19:29:02.148401307 -0800
@@ -22,9 +22,6 @@
 #include "config.h"
 #include "cfgfile.h"
 
-#define SOCK_NAME	"/var/run/spnav.sock"
-#define PIDFILE		"/var/run/spnavd.pid"
-#define LOGFILE		"/var/log/spnavd.log"
 /* Multiple devices support */
 #ifndef MAX_DEVICES
 #define MAX_DEVICES 8
